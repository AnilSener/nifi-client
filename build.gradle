/*******************************************************************************
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 ******************************************************************************/
plugins {
    id 'com.jfrog.bintray' version '1.4'
    id 'java'
    id 'maven'
    id 'maven-publish'
    id 'signing'
    id 'groovy'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

version = '0.2'
description = "A Groovy/Java client for interacting with an Apache NiFi instance"
group = 'mattyb149'
status = 'RELEASE'
project.ext.apiKey = System.getenv('BINTRAY_API_KEY') ?: System.getProperty('BINTRAY_API_KEY')

repositories {
    mavenCentral()
    jcenter()
}


configurations {
    shell
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.4.5'
    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'org.apache.httpcomponents:httpmime:4.2.1'

    shell("jline:jline:2.11") {
        exclude(group: 'junit', module: 'junit')
    }
    shell('commons-cli:commons-cli:1.2')

    testCompile 'org.spockframework:spock-core:0.7-groovy-2.0'

    shell 'org.codehaus.groovy:groovy-all:2.4.5'
    shell 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    shell 'org.apache.httpcomponents:httpmime:4.2.1'
}

task(shell, dependsOn: 'classes') << {
    def classpath = sourceSets.main.runtimeClasspath + configurations.shell
    def command = [
            System.getProperty('JAVA_HOME') ? "${System.getProperty('JAVA_HOME') / bin / java}" : 'java',
            '-cp', classpath.collect().join(':'),
            'org.codehaus.groovy.tools.shell.Main',
            '--color',
            '--terminal', 'unix',
            '-Dgroovysh.prompt=nifi-shell', '-e', '"import nifi.client.*"'
    ]
    def proc = new ProcessBuilder(command)
            .redirectOutput(ProcessBuilder.Redirect.INHERIT)
            .redirectInput(ProcessBuilder.Redirect.INHERIT)
            .redirectError(ProcessBuilder.Redirect.INHERIT)
            .start()
    proc.waitFor()
}

// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar, javadocJar
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            if (plugins.hasPlugin('war')) {
                from components.web
            } else {
                from components.java
            }

            artifact sourcesJar
            artifact javadocJar
            artifact shadowJar
        }
    }
}


bintray {
    user = System.getProperty('BINTRAY_USER') ?: 'mattyb149'
    key = project.ext.apiKey
    //configurations = ['default']
    publications = ['mavenJava']
    filesSpec {
        from 'files'
        into 'standalone_files/level1'
        rename '(.+)\\.(.+)', '$1-suffix.$2'
    }

    dryRun = false
    pkg {
        repo = 'maven'
        userOrg = group
        name = project.name
        desc = project.description
        websiteUrl = 'https://github.com/mattyb149/nifi-client'
        issueTrackerUrl = 'https://github.com/mattyb149/nifi-client/issues'
        vcsUrl = 'https://github.com/mattyb149/nifi-client.git'
        licenses = ['Apache-2.0']
        labels = ['apache', 'nifi', 'groovy']
        attributes = ['plat': ['linux', 'osx']]
        publicDownloadNumbers = true
        version {
            vcsTag = project.version
        }
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = "2.11"
}
